// Code generated by hertz generator.

package user

import (
	"apis/biz/utils"
	"context"
	"strconv"

	"apis/hertz_gen/api/user"
	"apis/rpc"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	user_kitex "user/kitex_gen/user"
)

// UserGet .
// @router /api/user/{id} [GET]
func UserGet(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserGetReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}
	resp := new(user.UserGetResp)

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}

// UserDelete .
// @router /api/user/{id} [DELETE]
func UserDelete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserDeleteReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}
	//获取id（为字符串类型）
	rawId := c.Param("id")
	//将字符串的id类型转换为整数
	id, err := strconv.ParseInt(rawId, 10, 32)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err) //id类型必须为整数
		return
	}

	resp, err := rpc.UserClient.DeleteUser(ctx, &user_kitex.DeleteUserReq{UserId: int32(id)})
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}

// UserUpdate .
// @router /api/user [PUT]
func UserUpdate(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserUpdateReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}

	resp := new(user.UserUpdateResp)

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}

// UserLogin .
// @router /api/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}

	resp := new(user.UserLoginResp)

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}

// UserLogout .
// @router /api/user/logout [POST]
func UserLogout(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserLogoutReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}

	resp := new(user.UserLogoutResp)

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}

// UserRegister .
// @router /api/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}

	resp := new(user.UserRegisterResp)

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}

// UserChangePassword .
// @router /api/user/changePassword [PUT]
func UserChangePassword(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UserChangePasswordReq
	err = c.BindAndValidate(&req)
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusOK, err)
		return
	}

	resp := new(user.UserChangePasswordResp)

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}
