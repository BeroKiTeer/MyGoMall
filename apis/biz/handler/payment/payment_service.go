// Code generated by hertz generator.

package payment

import (
	"apis/biz/utils"
	payment "apis/hertz_gen/api/payment"
	"apis/rpc"
	"auth/kitex_gen/auth"
	"context"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	payment_kitex "payment/kitex_gen/payment"
)

// Charge .
// @router /api/payment/charge [POST]
func Charge(ctx context.Context, c *app.RequestContext) {
	var err error
	var req payment.ChargeReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 获取请求头的token
	token := c.Request.Header.Get("Authorization")
	if token == "" {
		utils.SendErrResponse(ctx, c, consts.StatusUnauthorized, err)
		return
	}

	// 获取用户id
	userID, err := rpc.AuthClient.DecodeToken(ctx, &auth.DecodeTokenReq{Token: token})
	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusInternalServerError, err)
		return
	}

	resp, err := rpc.PaymentClient.Charge(ctx, &payment_kitex.ChargeReq{
		Amount: req.Amount,
		CreditCard: &payment_kitex.CreditCardInfo{
			CreditCardNumber:          req.CreditCard.CreditCardNumber,
			CreditCardCvv:             req.CreditCard.CreditCardCvv,
			CreditCardExpirationYear:  req.CreditCard.CreditCardExpirationYear,
			CreditCardExpirationMonth: req.CreditCard.CreditCardExpirationMonth,
		},
		OrderId: req.OrderId,
		UserId:  uint32(userID.UserId),
	})

	if err != nil {
		utils.SendErrResponse(ctx, c, consts.StatusInternalServerError, err)
	}

	utils.SendSuccessResponse(ctx, c, consts.StatusOK, resp)
}
